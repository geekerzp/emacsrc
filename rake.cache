#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("/Users/geekerzp/mycolorway/tower/" ("about                                                                 # List versions of all Rails frameworks and the environment" "airbrake:deploy                                                       # Notify Airbrake of a new deploy" "airbrake:heroku:add_deploy_notification                               # Install Heroku deploy notifications addon" "airbrake:log_stdout                                                   # " "airbrake:test                                                         # Verify your gem installation by sending a test exception to the airbrake service" "apipie:cache                                                          # Generate cache to avoid production dependencies on markup languages" "apipie:client                                                         # Generate CLI client for API documented with apipie gem" "apipie:static[version]                                                # Generate static documentation" "apipie:update_from_routes                                             # Update api description in controllers base on routes" "assets:cache:clean                                                    # " "assets:clean                                                          # Remove compiled assets" "assets:clean:all                                                      # " "assets:clean_expired                                                  # Remove old assets that aren't referenced by manifest.yml" "assets:clean_expired:all                                              # " "assets:environment                                                    # " "assets:precompile                                                     # Compile all the assets named in config.assets.precompile" "assets:precompile:all                                                 # " "assets:precompile:nondigest                                           # " "assets:precompile:primary                                             # " "cache_digests:dependencies                                            # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies                                     # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cohort:generate_last_week_cohort_data                                 # Generate last week's WeeklyCohortData" "cohort:rebuild_weekly_cohort_data                                     # Rebuild WeeklyCohortData records based on DailyActiveId" "daily_task:apns_feedback                                              # APNS feedback" "daily_task:clean_gdeyes                                               # Ensure has_visit_tower is set to false" "daily_task:cohort_report                                              # Generate cohort report every week" "daily_task:delay_todo_notify                                          # Send delay todos to creator and assinee" "daily_task:delayed_dingtalk_notify                                    # send delayed todos notification to dingtalk" "daily_task:expired_notify                                             # Send expired email to notify user subscription has expired" "daily_task:expiring_notify                                            # Send email to notify user subscription is expiring before 7 days" "daily_task:gdeyes                                                     # Calculate daily stats" "daily_task:send_dingtalk_case                                         # send dingtalk case to teams' admins created at yesterday" "daily_task:send_kpi_stats_to_influxdb                                 # Send kpi stats to influxdb" "daily_task:send_marketing_email[offset]                               # Send marketing email to all user" "daily_task:silent_team_stat                                           # Daily silent team account" "daily_task:teams_stat                                                 # teams stat " "daily_task:todo_stat                                                  # Daily todo statistics" "daily_task:trial_notify                                               # Send email to notify all trial team to select a plan" "daily_task:wechat_daily_todos_notify                                  # Wechat daily todos notify" "daily_task:wechat_upcoming_daily_todos_notify                         # Wechat upcoming daily todos notify" "data_export:cleanup                                                   # cleanup expired export datas" "db:_dump                                                              # " "db:abort_if_pending_migrations                                        # " "db:charset                                                            # " "db:collation                                                          # " "db:create                                                             # Create the database from DATABASE_URL or config/database.yml for the current Rails.env (use db:create:all to create all dbs in the config)" "db:create:all                                                         # " "db:drop                                                               # Drops the database using DATABASE_URL or the current Rails.env (use db:drop:all to drop all databases)" "db:drop:all                                                           # " "db:fixtures:identify                                                  # " "db:fixtures:load                                                      # Load fixtures into the current environment's database" "db:forward                                                            # " "db:load_config                                                        # " "db:migrate                                                            # Migrate the database (options: VERSION=x, VERBOSE=false)" "db:migrate:down                                                       # " "db:migrate:redo                                                       # " "db:migrate:reset                                                      # " "db:migrate:status                                                     # Display status of migrations" "db:migrate:up                                                         # " "db:reset                                                              # " "db:rollback                                                           # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:dump                                                        # Create a db/schema.rb file that can be portably used against any DB supported by AR" "db:schema:load                                                        # Load a schema.rb file into the database" "db:schema:load_if_ruby                                                # " "db:seed                                                               # Load the seed data from db/seeds.rb" "db:sessions:clear                                                     # " "db:sessions:create                                                    # " "db:setup                                                              # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the db first)" "db:structure:dump                                                     # Dump the database structure to db/structure.sql" "db:structure:load                                                     # " "db:structure:load_if_sql                                              # " "db:test:clone                                                         # " "db:test:clone_structure                                               # " "db:test:load                                                          # " "db:test:load_schema                                                   # " "db:test:load_structure                                                # " "db:test:prepare                                                       # " "db:test:purge                                                         # " "db:version                                                            # Retrieves the current schema version number" "default                                                               # " "dingtalk:chat_daily_report                                            # send daily report to dingtalk chat" "dingtalk:chat_weekly_report                                           # send weekly report to dingtalk chat" "dingtalk:register_update_events                                       # register all dingtalk_corps with update events" "doc                                                                   # " "doc/api                                                               # " "doc/api/index.html                                                    # " "doc/app                                                               # " "doc/app/index.html                                                    # " "doc:app                                                               # Generate docs for the app -- also available doc:rails, doc:guides, doc:plugins (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                                                           # " "doc:clobber_app                                                       # " "doc:clobber_plugins                                                   # " "doc:clobber_rails                                                     # " "doc:guides                                                            # " "doc:plugins                                                           # " "doc:rails                                                             # " "doc:reapp                                                             # " "doc:rerails                                                           # " "elasticsearch:reindex                                                 # elasticsearch init" "elasticsearch:sync_week                                               # sync week data to es" "emoji                                                                 # Copy emoji to the Rails `public/images/emoji` directory" "environment                                                           # " "erd                                                                   # Generate an Entity-Relationship Diagram based on your models" "erd:generate                                                          # " "erd:load_models                                                       # " "erd:options                                                           # " "generate_default_weekly_report_templates:run                          # " "import_data:from_teambition[email,token,guid]                         # import project data from teambition into existed team" "import_data:from_teambition_personal_without_stage[email,token,guid]  # import personal project data from teambition into existed team" "import_data:from_teambition_without_stage[email,token,guid]           # import team data from teambition into existed team" "import_data:from_trello[email,token,organization_name,guid]           # import organization data from trello into existed team" "import_data:from_trello_board[email,token,board_name,guid]            # import board data from trello into existed team" "import_data:from_trello_boards[email,token,guid]                      # import boards data from trello into existed team" "import_data:from_worktile[email,token,organization_name,guid]         # import data from worktile into existed team" "last_signed_in:import                                                 # 导入用户上次登录的时间" "log:clear                                                             # Truncates all *.log files in log/ to zero bytes" "marketing:calculate_users                                             # 确认（3.9~3.15）新注册团队的创建者数量正确" "marketing:send_project_novice_mail                                    # 给（3.9~3.15）新注册团队的创建者发新手邮件 2" "marketing:send_team_novice_mail                                       # 给（3.9~3.15）新注册团队的创建者发新手邮件 1" "middleware                                                            # Prints out your Rack middleware stack" "notes                                                                 # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                                                          # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                                                           # " "notes:optimize                                                        # " "notes:todo                                                            # " "oauth:create_clients                                                  # Intialize oauth clients" "oauth:show_clients                                                    # show all oauth clients" "rails:template                                                        # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy                                                  # " "rails:update                                                          # Update configs and some other initially generated files (or use just update:configs, update:scripts, or update:application_controller)" "rails:update:application_controller                                   # " "rails:update:configs                                                  # " "rails:update:scripts                                                  # " "rails_env                                                             # " "railties:install:migrations                                           # " "remove_default_attachmentdirs:run                                     # 上线文件夹功能时，移除项目里所有默认文件夹" "reorder_member_todos:run                                              # 根据任务时间设定该任务在成员任务页面应在的Box" "routes                                                                # Print out all defined routes in match order, with names" "secret                                                                # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "spec                                                                  # Run all specs in spec directory (excluding plugin specs)" "spec:api                                                              # Run the code examples in spec/api" "spec:controllers                                                      # Run the code examples in spec/controllers" "spec:helpers                                                          # Run the code examples in spec/helpers" "spec:models                                                           # Run the code examples in spec/models" "spec:notifiers                                                        # Run the code examples in spec/notifiers" "spec:observers                                                        # Run the code examples in spec/observers" "spec:prepare                                                          # " "spec:requests                                                         # Run the code examples in spec/requests" "spec:routing                                                          # Run the code examples in spec/routing" "spec:services                                                         # Run the code examples in spec/services" "spec:statsetup                                                        # " "spec:views                                                            # Run the code examples in spec/views" "spinach                                                               # runs the whole spinach suite" "spinach:generate                                                      # runs spinach and generates feature steps files when necessary" "spinach_env                                                           # " "stats                                                                 # Report code statistics (KLOCs, etc) from the application" "symmetric_encryption:decrypt                                          # Decrypt the supplied string" "symmetric_encryption:decrypt_file                                     # Decrypt a file" "symmetric_encryption:encrypt                                          # Encrypt a value, such as a password" "symmetric_encryption:encrypt_file                                     # Encrypt a file" "symmetric_encryption:random_password                                  # Generate a random password and display its encrypted form" "temp:add_sub_specs:run                                                # " "temp:adjust_dingtalk_avatar:run                                       # " "temp:bad_contacts:map_member                                          # " "temp:bad_contacts:map_user                                            # " "temp:bad_corps:fix_agent                                              # fix agent error" "temp:bad_teams:fix_owner[fix_type]                                    # " "temp:bad_teams:set_created_from                                       # Set Team#created_from field according to Team#owner_email" "temp:bad_teams:set_dingtalk_corp                                      # Set Team#dingtalk_corp to nil for Team#dingtalk_unbinded teams" "temp:bad_users:change_binding[pre_email,email]                        # Change dingtalk binding from `pre_email' to `email'" "temp:bad_users:fix_system_password                                    # " "temp:dingtalk_case:run                                                # " "temp:dingtalk_case:test                                               # " "temp:dingtalk_case_huaxiashuchengjiaoyu:run                           # " "temp:dingtalk_case_huaxiashuchengjiaoyu:test                          # " "temp:dingtalk_case_jikebang:run                                       # " "temp:dingtalk_case_jikebang:test                                      # " "temp:dingtalk_first_todo:run                                          # 「创建第一条任务」推送" "temp:dingtalk_first_todo:test                                         # 「创建第一条任务」推送 (测试)" "temp:dingtalk_questionnaire:run                                       # " "temp:dingtalk_questionnaire:test                                      # " "temp:dingtalk_survey:run                                              # " "temp:dingtalk_survey:test                                             # " "temp:failed_dingtalk_corp:rerun                                       # " "temp:left_money_transform:backup                                      # " "temp:left_money_transform:run                                         # " "temp:new_signup_data:export_csv                                       # " "temp:organization_team_transform:run                                  # " "temp:send_new_payments_newsletter:run                                 # " "temp:special_team_transform:run                                       # " "test                                                                  # Runs test:units, test:functionals, test:integration together (also available: test:benchmark, test:profile, test:plugins)" "test:benchmark                                                        # " "test:functionals                                                      # " "test:integration                                                      # " "test:plugins                                                          # " "test:prepare                                                          # " "test:profile                                                          # " "test:recent                                                           # Run tests for {:recent=>\"test:prepare\"} / Test recent changes" "test:run                                                              # " "test:single                                                           # Run tests for {:single=>\"test:prepare\"}" "test:test:benchmark_mode                                              # " "test:uncommitted                                                      # Run tests for {:uncommitted=>\"test:prepare\"} / Test changes since last checkin (only Subversion and Git)" "test:units                                                            # " "time:zones:all                                                        # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                                                      # " "time:zones:us                                                         # " "tmp:cache:clear                                                       # " "tmp:clear                                                             # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                                                            # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                                                        # " "tmp:sessions:clear                                                    # " "tmp:sockets:clear                                                     # " "tower:active_stat[minute]                                             # 统计当前活跃的用户数量, #rake tower:active_stat[3]  RAILS_ENV=production  , 3 的含义是统计最近3分钟,最大可以到1440（一天）" "tower:add_project_bubble                                              # " "tower:cash_coupons:get_info                                           # 更新全部红包的状态，查看红包是否被领取" "tower:create_table_progresses                                         # 创建 回顾 数据合并表，将最新的N个月的分表合并 #rake tower:create_table_progresses  RAILS_ENV=production" "tower:data_setters:set_default_projects_name                          # Set all default projects' name" "tower:data_setters:set_dingtalk_users_has_new_feature_true            # Set all dingtalk users' has_new_feature to true" "tower:data_setters:set_users_has_new_feature_true                     # Set all users' has_new_feature to true" "tower:data_viewers:recent_sticked_todolists_count                     # View sticked todolists count in recent 3 months" "tower:data_viewers:total_left_money                                   # View total left money of all teams" "tower:dbdump                                                          # database backup" "tower:dump_team_data[team_id]                                         # dump team data" "tower:dump_welcome_data                                               # dump welcome data" "tower:fix_office_mime_type                                            # fix office documents content type" "tower:generate_giftcards_for_activity[code,activity,price,quantity]   # 生成指定代码和数量、活动的代金卷" "tower:generate_wechat_invite_giftcard                                 # 生成一张新的 299 元优惠码" "tower:initialize_statutory_holiday                                    # 为所有已存在团队添加法定假日日历" "tower:member_todos_reorder                                            # 对 member 主页的 todos 按照‘今天要做的事’ 的机制进行排序，生产环境中工作量较大，建议在用户量少的时间段运行" "tower:new_register_gifts                                              # " "tower:new_year_gifts                                                  # " "tower:oss_avatar_reset                                                # 刷新 aliyun oss 上的所有头像文件的 cache-control 参数" "tower:oss_del_oldfile_tower1                                          # delete old file oss bucket tower1" "tower:oss_get[bucket,srcfile,dstfile]                                 # get db back file from oss; rake tower:oss_get[\"databaseback\",\"tower_db_dump_2013_06_20_06_05.sql.tar.gz.ssl\",\"/tmp/tower.sql.tar.gz.ssl\"]" "tower:oss_upgrade_avatar                                              # aliyun oss 上线后，需要对老的头像数据做搬迁处理, 搬迁到新的本地目录，保存到oss中" "tower:oss_upgrade_file_welcome                                        # aliyun oss , welcome 186 项中的附件搬迁" "tower:oss_upgrade_oldfile[minid]                                      # aliyun oss , 所有老的附件搬迁" "tower:oss_upgrade_student_img                                         # aliyun oss 上线后，需要对老的 学生证图片 数据做搬迁处理, 搬迁到新的本地目录，保存到oss中" "tower:repair_from_qy_wechat                                           # 企业号 11 月 18 日开始内测" "tower:repair_redpack_event                                            # 修复红包产生的事件，ancestor 关联到 project" "tower:reset_team_stats                                                # 重置团队的统计数据" "tower:send_gifts_to_free_teams                                        # " "tower:sniff_all                                                       # 将没地理位置、IP 等相关信息的 signin_log 补全" "tower:stat_todo_delay_trend                                           # 导出任务延误率的趋势数据" "tower:statsetup                                                       # custom stats" "tower:update_dingtalk_webfont                                         # " "tower:update_todolists_completed_at                                   # " "tower:update_webfont                                                  # fetch fonticons css and fonts file locale" "tower:upgrade_qywechat_menu                                           # 升级企业号的菜单" "tower:utils:backup:export[team_id,start_date]                         # Export a specific team's data" "tower:utils:backup:restore[team_id]                                   # Restore a specific team's data" "tower:utils:export_active_teams:export                                # Export all active teams to a csv file" "tower:utils:export_paid_teams:export                                  # Export all paid teams to a csv file" "tower:year_end                                                        # Tower 2014 年终活动" "tower:year_end_2015[csv_file]                                         # Tower 2014 年终活动" "tower:year_end_ranking                                                # 统计得分，计算排名" "utils:tower:gen_kpi_score                                             # Calculate teams kpi score in a specific period" "utils:tower:user_action_data                                          # Calculate users action data in a specific period") "/Volumes/expansion/gfresh/gfresh_nova/" ("about                              # List versions of all Rails frameworks and the environment" "app:template                       # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                 # " "app:update                         # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:bin                     # " "app:update:configs                 # " "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:backup_admin_users              # Backup admin_users table" "db:charset                         # " "db:check_protected_environments    # " "db:clean_admin_users               # Clean admin_users table" "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config)" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config)" "db:drop:_unsafe                    # " "db:drop:all                        # " "db:environment:set                 # Set the environment value for the database" "db:fixtures:identify               # " "db:fixtures:load                   # Loads fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:move_admin_users_to_users       # Transfer sellers data from admin_user to users" "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:restore_admin_users             # Restore admin_users table" "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clears a db/schema_cache.dump file" "db:schema:cache:dump               # Creates a db/schema_cache.dump file" "db:schema:dump                     # Creates a db/schema.rb file that is portable against any DB supported by Active Record" "db:schema:load                     # Loads a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Loads the seed data from db/seeds.rb" "db:setup                           # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:shops2users                     # transfer shops data to users" "db:structure:dump                  # Dumps the database structure to db/structure.sql" "db:structure:load                  # Recreates the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "default                            # " "dev:cache                          # Toggle development mode caching on/off" "environment                        # " "files:install:migrations           # Copy migrations from files to application" "images:regenerate                  # " "import:support_users               # " "initializers                       # Print out all defined initializers in the order they are invoked by Rails" "log:clear                          # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # " "rails:templates:copy               # " "rails:update                       # " "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "restart                            # Restart app by touching tmp/restart.txt" "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "test                               # Runs all tests in test folder" "test:controllers                   # " "test:db                            # Run tests quickly, but also reset db" "test:functionals                   # " "test:generators                    # " "test:helpers                       # " "test:integration                   # " "test:jobs                          # " "test:mailers                       # " "test:models                        # " "test:prepare                       # " "test:run                           # " "test:units                         # " "time:zones[country_or_offset]      # List all time zones, list by two-letter country code (`rails time:zones[US]`), or list by UTC offset (`rails time:zones[-8]`)" "time:zones:all                     # " "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/pids                           # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear cache and socket files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sockets:clear                  # ")))